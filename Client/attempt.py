#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.12
# In conjunction with Tcl version 8.6
#    Apr 09, 2018 06:06:25 PM

import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import attempt_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = New_Toplevel (root)
    attempt_support.init(root, top)
    root.mainloop()

w = None
def create_New_Toplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = New_Toplevel (w)
    attempt_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_New_Toplevel():
    global w
    w.destroy()
    w = None

#Drawing code starts here
b1 = "up"
xold, yold = None, None

def b1down(event):
    global b1
    b1 = "down"           # you only want to draw when the button is down
                          # because "Motion" events happen -all the time-

def b1up(event):
    global b1, xold, yold
    b1 = "up"
    xold = None           # reset the line when you let go of the button
    yold = None

def motion(event):
    global color
    if b1 == "down":
        global xold, yold
        if xold is not None and yold is not None:
            event.widget.create_line(xold,yold,event.x,event.y,smooth=TRUE, fill=color)
                          # here's where you draw it. smooth. neat.
        xold = event.x
        yold = event.y

def main():
    
    # root = Tk()
    # my_gui = GUI(root)  #my_gui needed???
    # frame = Tk.Frame()
    drawing_area = Canvas(root)
    drawing_area.pack()
    drawing_area.bind("<Motion>", motion)
    drawing_area.bind("<ButtonPress-1>", b1down)
    drawing_area.bind("<ButtonRelease-1>", b1up)
    print("drawing test")
    root.mainloop()
#Drawing code ends here

class New_Toplevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 

        top.geometry("600x450+640+112")
        top.title("New Toplevel")
        top.configure(highlightcolor="black")



        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.menubar.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                command=attempt_support.connect,
                font="TkMenuFont",
                foreground="#000000",
                label="Connect")
        self.menubar.add_command(
                activebackground="#d8d8d8",
                activeforeground="#000000",
                background="#d9d9d9",
                command=attempt_support.quit,
                font="TkMenuFont",
                foreground="#000000",
                label="Quit")


        self.Canvas1 = Canvas(top)
        self.Canvas1.place(relx=0.1, rely=0.09, relheight=0.85, relwidth=0.85)
        self.Canvas1.configure(background="#ffffff")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(relief=RIDGE)
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(width=511)

        self.ButtonRed = Button(top)
        self.ButtonRed.place(relx=0.95, rely=0.31, height=26, width=27)
        self.ButtonRed.configure(activebackground="#d9d9d9")
        self.ButtonRed.configure(background="#d90000")
        self.ButtonRed.configure(command=attempt_support.changeRed)

        self.ButtonBlack = Button(top)
        self.ButtonBlack.place(relx=0.95, rely=0.11, height=26, width=27)
        self.ButtonBlack.configure(activebackground="#d9d9d9")
        self.ButtonBlack.configure(background="#000000")
        self.ButtonBlack.configure(command=attempt_support.changeBlack)

        self.ButtonBlue = Button(top)
        self.ButtonBlue.place(relx=0.95, rely=0.38, height=26, width=27)
        self.ButtonBlue.configure(activebackground="#d9d9d9")
        self.ButtonBlue.configure(background="#0000ff")
        self.ButtonBlue.configure(command=attempt_support.changeBlue)

        self.ButtonWhite = Button(top)
        self.ButtonWhite.place(relx=0.95, rely=0.24, height=26, width=27)
        self.ButtonWhite.configure(activebackground="#d9d9d9")
        self.ButtonWhite.configure(background="#ffffff")
        self.ButtonWhite.configure(command=attempt_support.changeWhite)

        self.ButtonGray = Button(top)
        self.ButtonGray.place(relx=0.95, rely=0.18, height=26, width=27)
        self.ButtonGray.configure(activebackground="#d9d9d9")
        self.ButtonGray.configure(background="#787878")
        self.ButtonGray.configure(command=attempt_support.changeGray)
        
        self.ButtonYellow = Button(top)
        self.ButtonYellow.place(relx=0.95, rely=0.44, height=26, width=27)
        self.ButtonYellow.configure(activebackground="#d9d9d9")
        self.ButtonYellow.configure(background="#ffff00")
        self.ButtonYellow.configure(command=attempt_support.changeYellow)





if __name__ == '__main__':
    vp_start_gui()
    main()


